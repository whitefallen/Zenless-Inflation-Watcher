name: Deploy PWA to GitHub Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pages: write
  actions: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates fonts-liberation libappindicator3-1 libasound2t64 libatk-bridge2.0-0 \
            libatk1.0-0 libcups2 libdbus-1-3 libdrm2 libgbm1 libgtk-3-0 libnspr4 libnss3 \
            libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 xdg-utils

      - name: Rebuild native modules
        run: npm rebuild

      - name: Generate PWA icons
        run: |
          echo "🎨 Generating PNG icons from HTML templates..."
          if node scripts/generateIconsPNG.js; then
            echo "✅ PNG icons generated successfully with Puppeteer"
          else
            echo "⚠️ Puppeteer failed, ensuring basic PWA icons exist..."
            node scripts/ensurePWAIcons.js
          fi

      - name: Copy data files to public
        run: node scripts/copy-data-to-public.js

      - name: Generate PWA manifest
        run: node scripts/generateManifest.js
        env:
          NODE_ENV: production

      - name: Build Next.js PWA
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify PWA deployment
        run: node scripts/verifyPWADeployment.js

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.TOKEN }}
          publish_dir: ./out

      - name: Run Lighthouse CI
        id: lighthouse
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://whitefallen.github.io/Zenless-Inflation-Watcher/
            https://whitefallen.github.io/Zenless-Inflation-Watcher/deadly-assault
            https://whitefallen.github.io/Zenless-Inflation-Watcher/shiyu-defense
          configPath: .lighthouserc.json
          temporaryPublicStorage: true
          
      - name: Display Lighthouse report URLs
        if: ${{ always() }}
        run: |
          echo "Lighthouse reports are available at the following URLs (when provided by the CI action):"
          echo "Reports: ${{ steps.lighthouse.outputs.links || 'No reports generated' }}"
          
      - name: Create Lighthouse Reports Directory
        if: ${{ always() }}
        run: mkdir -p ./lighthouse-reports
        
      - name: Save Lighthouse Reports
        if: ${{ success() && steps.lighthouse.outputs.links != '' }}
        run: |
          # Extract and clean up the Google Storage URLs from the links
          echo "${{ steps.lighthouse.outputs.links }}" | sed -E 's/https:\/\/whitefallen.github.io\/Zenless-Inflation-Watcher\/[^:]*://' > ./lighthouse-reports/report-links.txt
          
          # Create the summary markdown with fixed links
          echo "# Lighthouse Report Summary" > ./lighthouse-reports/summary.md
          echo "" >> ./lighthouse-reports/summary.md
          echo "## Reports generated on $(date)" >> ./lighthouse-reports/summary.md
          echo "" >> ./lighthouse-reports/summary.md
          echo "## Links to Reports:" >> ./lighthouse-reports/summary.md
          echo "" >> ./lighthouse-reports/summary.md
          
          # Process each link, removing the incorrect prefix
          echo "${{ steps.lighthouse.outputs.links }}" | tr ',' '\n' | while read link; do
            page_url=$(echo "$link" | cut -d':' -f1)
            report_url=$(echo "$link" | cut -d':' -f2-)
            page_name=$(basename "$page_url")
            
            if [ -z "$page_name" ]; then
              page_name="Landing Page"
            fi
            
            echo "- **$page_name**: [$report_url]($report_url)" >> ./lighthouse-reports/summary.md
          done
          
          echo "" >> ./lighthouse-reports/summary.md
          echo "## Page URLs Tested:" >> ./lighthouse-reports/summary.md
          echo "" >> ./lighthouse-reports/summary.md
          echo "- [Landing Page](https://whitefallen.github.io/Zenless-Inflation-Watcher/)" >> ./lighthouse-reports/summary.md
          echo "- [Deadly Assault](https://whitefallen.github.io/Zenless-Inflation-Watcher/deadly-assault)" >> ./lighthouse-reports/summary.md
          echo "- [Shiyu Defense](https://whitefallen.github.io/Zenless-Inflation-Watcher/shiyu-defense)" >> ./lighthouse-reports/summary.md
          
      - name: Upload Lighthouse results as artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: ./lighthouse-reports
          retention-days: 7
          if-no-files-found: warn
